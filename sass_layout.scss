$global-frame-map: () !global;

@import "_util";

@mixin layout($layout) {
  $current-node: #{&} !default;

  $layout: layout-property("margin", $layout);
  $layout: layout-property("padding", $layout);
  $layout: layout-property("used", $layout);

  $layout: map-merge((
    width: 0, height: 0, top: 0, left: 0,
    selector: $current-node,
    parent-selector: parent-selector($current-node),
    star-direction: top,
    child_nodes: ()
  ), $layout);
  @include save-layout($layout);
  @include register-with-parent($layout);
}

@mixin register-with-parent($layout) {
  $parent-node: get-layout(map-get($layout, parent-selector));
  @if $parent-node != null {
    $siblings: map-get($parent-node, child_nodes);
    $parent-node: map-set($parent-node, child_nodes, append($siblings, map-get($layout, selector)));
    @include save-layout($parent-node);
  }
}

@mixin render-layout() {
  @each $selector, $node in root-nodes() {
    @include render-one-layout($node);
  }
}

@function has-parent($node) {
  @return map-get($node, parent-selector) != "";
}

@function parent($node) {
  @return get-layout(map-get($node, parent-selector));
}

@mixin render-one-layout($node) {
    $node: calculate-params-on-direction($node, top);
    $node: calculate-params-on-direction($node, left);
    @include save-layout($node);

    @each $child_selector in map-get($node, child_nodes) {
      $child_node: get-layout($child_selector);
      @include render-one-layout($child_node);
    }
}

@function calculate-params-on-direction($node, $direction) {
    $used-property: if(has-parent($node), map-get(parent($node), used-#{$direction}), 0);
    $node: map-merge($node, ($direction: $used-property + map-get($node, margin-#{$direction})));
    @if has-parent($node) and $direction == map-get($node, star-direction) {
      $used-property: $used-property + spent-space-on-direction($node, $direction);
      $parent-node: map-set(parent($node), used-#{$direction}, $used-property);
      $parent-node: save-layout($parent-node);
    }
    @return $node;
}

@function spent-space-on-direction($node, $direction) {
  @if $direction == 'top' or $direction == 'bottom' {
    @return map-get($node, height) + map-get($node, margin-top) + map-get($node, margin-bottom);
  } @else {
    @return map-get($node, width) + map-get($node, margin-left) + map-get($node, margin-right);
  }
}

@mixin render-child-layout($node) {
  @if length(map-get($node, child_nodes)) > 0 {
    @each $child_selector in map-get($node, child_nodes) {
      $child_node: get-layout($child_selector);
      $child_node: map-merge($child_node, (top: $parent-top, left: 0));
      $parent-top: $parent-top + map-get($child_node, height);
      @include save-layout($child_node);
      @include render-child-layout($child_node);
    }
  }
}

@function root-nodes() {
  $root-nodes: ();
  @each $selector, $node in $global-frame-map {
    @if map-get($node, parent-selector) == "" {
      $root-nodes: map-set($root-nodes, $selector, $node);
    }
  }
  @return $root-nodes;
}
