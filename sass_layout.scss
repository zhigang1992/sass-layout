$global-frame-map: () !global;

@import "_util";

@function empty-layout() {
  $empty-layout: (
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    flex-total: 0,
    flex: 0,
    non-flex-pixels: 0,
    align-items: 'stretch',
    child-nodes: ()
  );
  $empty-layout: layout-property("margin", $empty-layout);
  $empty-layout: layout-property("padding", $empty-layout);
  $empty-layout: layout-property("used", $empty-layout);
  @return $empty-layout;
}

@mixin layout($layout) {
  $current-node: #{&} !default;

  $layout: layout-property("margin", $layout);
  $layout: layout-property("padding", $layout);
  $layout: layout-property("used", $layout);

  $layout: map-merge(empty-layout(), $layout);
  $layout: map-merge((
    selector: $current-node,
    parent-selector: parent-selector($current-node),
    start-direction: if(map-get($layout, flex-direction) == 'row', left, top),
    cross-start-direction: if(map-get($layout, flex-direction) == 'row', top, left),
    child-nodes: ()
  ), $layout);
  $layout: map-merge((
    align-self: if(has-parent($layout), map-get(parent($layout), align-items), 'stretch')
  ), $layout);
  @include save-layout($layout);
  @include register-with-parent($layout);
}

@mixin register-with-parent($layout) {
  $parent-node: parent($layout);
  @if $parent-node != null {
    $child-nodes: append(map-get($parent-node, child-nodes), map-get($layout, selector));
    $flexs: map-get($parent-node, flex-total) + map-get($layout, flex);
    $start-direction: map-get($parent-node, start-direction);
    $axis: if(is-vertical($start-direction), height, width);
    $non-flex-pixels: if(map-get($layout, flex) == 0, spent-space-on-direction($layout, $start-direction), 0);
    $parent-node: map-merge($parent-node, (
      child-nodes: $child-nodes,
      flex-total: $flexs,
      non-flex-pixels: map-get($parent-node, non-flex-pixels) + $non-flex-pixels,
    ));
    @include save-layout($parent-node);
  }
}

@mixin render-layout() {
  @each $selector, $node in root-nodes() {
    @include render-one-layout($node);
  }
}

@function has-parent($node) {
  @return map-get($node, parent-selector) != "";
}

@function parent($node) {
  @return get-layout(map-get($node, parent-selector));
}

@mixin render-one-layout($node) {
    $node: calculate-params-on-direction($node, top);
    $node: calculate-params-on-direction($node, left);
    @if map-get($node, height) == 0 {
      $node: map-merge($node, (
        height: map-get($node, padding-top) + map-get($node, padding-bottom),
        altered-height: true
      ));
    }
    @if map-get($node, width) == 0 {
      $node: map-merge($node, (
        width: map-get($node, padding-left) + map-get($node, padding-right),
        altered-width: true
      ));
    }
    @include save-layout($node);

    $child-nodes: prepare-child-nodes-for-justify-content($node);
    @each $child_node in $child-nodes {
      @include render-one-layout($child_node);
    }

    $node: get-layout(map-get($node, selector));
    @include adjust-parent-if-needed($node);

    $node: map-merge($node, (
      height: max(map-get($node, height), map-get($node, padding-top) + map-get($node, padding-bottom)),
      width: max(map-get($node, width), map-get($node, padding-left) + map-get($node, padding-right)),
    ));
    @include save-layout($node);
}

@function prepare-child-nodes-for-justify-content($node) {
  @if length(map-get($node, child-nodes)) > 0 {
    $justify-content: map-get($node, justify-content);
    $fake-node: map-merge(empty-layout(), (
      parent-selector: map-get($node, selector),
      flex: 1
    ));
    $flex-point-to-add: 0;
    $child-nodes: ();
    @each $node-selector in map-get($node, child-nodes) {
      $child-nodes: append($child-nodes, get-layout($node-selector));
    }
    @if ($justify-content == flex-start) {
      $flex-point-to-add: 1;
      $child-nodes: append($child-nodes, $fake-node);
    } @else if($justify-content == flex-end) {
      $flex-point-to-add: 1;
      $new-child-nodes: ();
      $child-nodes: join(($fake-node,), $child-nodes);
    } @else if($justify-content == space-between) {
      $flex-point-to-add: length($child-nodes) - 1;
      $child-nodes: join-list-with-item($child-nodes, $fake-node);
    } @else if($justify-content == space-around) {
      $flex-point-to-add: length($child-nodes);
      $fake-half-node: map-merge(empty-layout(), (
        parent-selector: map-get($node, selector),
        flex: 0.5
      ));
      $child-nodes: join-list-with-item($child-nodes, $fake-node);
      $child-nodes: join(($fake-half-node,), $child-nodes);
      $child-nodes: append($child-nodes, $fake-half-node);
    } @else if($justify-content == center) {
      $flex-point-to-add: 2;
      $child-nodes: join(($fake-node,), $child-nodes);
      $child-nodes: append($child-nodes, $fake-node);
    }
    $node: map-merge($node, (
      flex-total: map-get($node, flex-total) + $flex-point-to-add
    ));
    $node: save-layout($node);
    @return $child-nodes;
  }
  @return ();
}

@function join-list-with-item($list, $item) {
  $new-list: ();
  @for $i from 1 through length($list) - 1 {
    $new-list: join($new-list, (nth($list, $i), $item));
  }
  @return append($new-list, nth($list, length($list)));
}

@function calculate-params-on-direction($node, $direction) {
    $used-property: if(has-parent($node), map-get(parent($node), used-#{$direction}), 0);
    $parent-node: parent($node);
    $direction-value: $used-property + map-get($node, margin-#{$direction}); 
    @if has-parent($node) {
      $direction-value: $direction-value + map-get($parent-node, padding-#{$direction});
    }
    $node: map-merge($node, ($direction: $direction-value));
    @if has-parent($node) and $direction == map-get($parent-node, start-direction) {
      @if map-get($node, flex) > 0 {
        $flexable-space: if(is-vertical($direction), 
          map-get($parent-node, height) - map-get($parent-node, padding-top) - map-get($parent-node, padding-bottom), 
          map-get($parent-node, width) - map-get($parent-node, padding-left) - map-get ($parent-node, padding-right)
        );
        $flexable-space: $flexable-space - map-get($parent-node, non-flex-pixels);
        $flex-total: map-get($parent-node, flex-total);
        $node: map-set($node, if(is-vertical($direction), height, width), $flexable-space * map-get($node, flex) / $flex-total);
      }
      $used-property: $used-property + spent-space-on-direction($node, $direction);
      $parent-node: map-set($parent-node, used-#{$direction}, $used-property);
      $parent-node: save-layout($parent-node);
    }
    @if has-parent($node) and $direction == map-get($parent-node, cross-start-direction) {
      $cross-start-direction: map-get($parent-node, cross-start-direction);
      $align-self: map-get($node, align-self);
      $new-position: map-get($node, margin-#{$cross-start-direction}) + map-get($parent-node, padding-#{$cross-start-direction});
      $axis: if(is-vertical($cross-start-direction), height, width);
      $parent-size: map-get($parent-node, $axis) - map-get($parent-node, padding-#{$cross-start-direction}) - map-get($parent-node, padding-#{oppsite-direction($cross-start-direction)});
      @if $align-self == flex-end {
        $new-position: max($new-position, $parent-size - spent-space-on-direction($node, $cross-start-direction));
      } @else if $align-self == center {
        $new-position: max($new-position, ($parent-size - spent-space-on-direction($node, $cross-start-direction)) / 2);
      } @else if $align-self == stretch {
        @if map-get($node, $axis) == 0 {
          $axis-value: $parent-size - map-get($node, margin-#{$cross-start-direction}) - map-get($node, margin-#{oppsite-direction($cross-start-direction)});
          $node: map-set($node, $axis, max(0, $axis-value));
        }
      }
      $node: map-set($node, $cross-start-direction, $new-position);
    }
    @return $node;
}

@function oppsite-direction($direction) {
  $map: (
    top: bottom,
    left: right,
    bottom: top,
    right: left
  );
  @return map-get($map, $direction);
}

@function spent-space-on-direction($node, $direction) {
  @if is-vertical($direction) {
    @return map-get($node, height) + map-get($node, margin-top) + map-get($node, margin-bottom);
  } @else {
    @return map-get($node, width) + map-get($node, margin-left) + map-get($node, margin-right);
  }
}

@function is-vertical($direction) {
  @return $direction == 'top' or $direction == 'bottom';
}

@mixin adjust-parent-if-needed($node) {
  @if has-parent($node) {
    $parent: parent($node);
    @if map-get($parent, width) == 0 or map-get($parent, altered-width) == true {
      $width: map-get($node, left) + map-get($node, width) + map-get($node, margin-right) +  map-get($parent, padding-right);
      $parent: map-set($parent, width, $width);
      $parent: map-set($parent, altered-width, true);
    }
    @if map-get($parent, height) == 0 or map-get($parent, altered-height) == true {
      $height: map-get($node, top) + map-get($node, height) + map-get($node, margin-bottom) + map-get($parent, padding-bottom);
      $parent: map-set($parent, height, $height);
      $parent: map-set($parent, altered-height , true);
    }
    @include save-layout($parent);
  }
}

@mixin render-child-layout($node) {
  @if length(map-get($node, child-nodes)) > 0 {
    @each $child_selector in map-get($node, child-nodes) {
      $child_node: get-layout($child_selector);
      $child_node: map-merge($child_node, (top: $parent-top, left: 0));
      $parent-top: $parent-top + map-get($child_node, height);
      @include save-layout($child_node);
      @include render-child-layout($child_node);
    }
  }
}

@function root-nodes() {
  $root-nodes: ();
  @each $selector, $node in $global-frame-map {
    @if map-get($node, parent-selector) == "" {
      $root-nodes: map-set($root-nodes, $selector, $node);
    }
  }
  @return $root-nodes;
}
